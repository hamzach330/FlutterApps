// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/hydrogen_flutter.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class HydrogenFlutterBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  HydrogenFlutterBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  HydrogenFlutterBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int hydro_init() {
    return _hydro_init();
  }

  late final _hydro_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('hydro_init');
  late final _hydro_init = _hydro_initPtr.asFunction<int Function()>();

  int hydro_random_u32() {
    return _hydro_random_u32();
  }

  late final _hydro_random_u32Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('hydro_random_u32');
  late final _hydro_random_u32 =
      _hydro_random_u32Ptr.asFunction<int Function()>();

  int hydro_random_uniform(
    int upper_bound,
  ) {
    return _hydro_random_uniform(
      upper_bound,
    );
  }

  late final _hydro_random_uniformPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>(
          'hydro_random_uniform');
  late final _hydro_random_uniform =
      _hydro_random_uniformPtr.asFunction<int Function(int)>();

  void hydro_random_buf(
    ffi.Pointer<ffi.Void> out,
    int out_len,
  ) {
    return _hydro_random_buf(
      out,
      out_len,
    );
  }

  late final _hydro_random_bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('hydro_random_buf');
  late final _hydro_random_buf = _hydro_random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void hydro_random_buf_deterministic(
    ffi.Pointer<ffi.Void> out,
    int out_len,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return _hydro_random_buf_deterministic(
      out,
      out_len,
      seed,
    );
  }

  late final _hydro_random_buf_deterministicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('hydro_random_buf_deterministic');
  late final _hydro_random_buf_deterministic =
      _hydro_random_buf_deterministicPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Uint8>)>();

  void hydro_random_ratchet() {
    return _hydro_random_ratchet();
  }

  late final _hydro_random_ratchetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('hydro_random_ratchet');
  late final _hydro_random_ratchet =
      _hydro_random_ratchetPtr.asFunction<void Function()>();

  void hydro_random_reseed() {
    return _hydro_random_reseed();
  }

  late final _hydro_random_reseedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('hydro_random_reseed');
  late final _hydro_random_reseed =
      _hydro_random_reseedPtr.asFunction<void Function()>();

  void hydro_hash_keygen(
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _hydro_hash_keygen(
      key,
    );
  }

  late final _hydro_hash_keygenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>>(
          'hydro_hash_keygen');
  late final _hydro_hash_keygen =
      _hydro_hash_keygenPtr.asFunction<void Function(ffi.Pointer<ffi.Uint8>)>();

  int hydro_hash_init(
    ffi.Pointer<hydro_hash_state> state,
    ffi.Pointer<ffi.Char> ctx,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _hydro_hash_init(
      state,
      ctx,
      key,
    );
  }

  late final _hydro_hash_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<hydro_hash_state>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_hash_init');
  late final _hydro_hash_init = _hydro_hash_initPtr.asFunction<
      int Function(ffi.Pointer<hydro_hash_state>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Uint8>)>();

  int hydro_hash_update(
    ffi.Pointer<hydro_hash_state> state,
    ffi.Pointer<ffi.Void> in_,
    int in_len,
  ) {
    return _hydro_hash_update(
      state,
      in_,
      in_len,
    );
  }

  late final _hydro_hash_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<hydro_hash_state>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('hydro_hash_update');
  late final _hydro_hash_update = _hydro_hash_updatePtr.asFunction<
      int Function(
          ffi.Pointer<hydro_hash_state>, ffi.Pointer<ffi.Void>, int)>();

  int hydro_hash_final(
    ffi.Pointer<hydro_hash_state> state,
    ffi.Pointer<ffi.Uint8> out,
    int out_len,
  ) {
    return _hydro_hash_final(
      state,
      out,
      out_len,
    );
  }

  late final _hydro_hash_finalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<hydro_hash_state>,
              ffi.Pointer<ffi.Uint8>, ffi.Size)>>('hydro_hash_final');
  late final _hydro_hash_final = _hydro_hash_finalPtr.asFunction<
      int Function(
          ffi.Pointer<hydro_hash_state>, ffi.Pointer<ffi.Uint8>, int)>();

  int hydro_hash_hash(
    ffi.Pointer<ffi.Uint8> out,
    int out_len,
    ffi.Pointer<ffi.Void> in_,
    int in_len,
    ffi.Pointer<ffi.Char> ctx,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _hydro_hash_hash(
      out,
      out_len,
      in_,
      in_len,
      ctx,
      key,
    );
  }

  late final _hydro_hash_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_hash_hash');
  late final _hydro_hash_hash = _hydro_hash_hashPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  void hydro_secretbox_keygen(
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _hydro_secretbox_keygen(
      key,
    );
  }

  late final _hydro_secretbox_keygenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>>(
          'hydro_secretbox_keygen');
  late final _hydro_secretbox_keygen = _hydro_secretbox_keygenPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>)>();

  int hydro_secretbox_encrypt(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Void> m_,
    int mlen,
    int msg_id,
    ffi.Pointer<ffi.Char> ctx,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _hydro_secretbox_encrypt(
      c,
      m_,
      mlen,
      msg_id,
      ctx,
      key,
    );
  }

  late final _hydro_secretbox_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Uint64,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_secretbox_encrypt');
  late final _hydro_secretbox_encrypt = _hydro_secretbox_encryptPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Void>, int, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int hydro_secretbox_decrypt(
    ffi.Pointer<ffi.Void> m_,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    int msg_id,
    ffi.Pointer<ffi.Char> ctx,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _hydro_secretbox_decrypt(
      m_,
      c,
      clen,
      msg_id,
      ctx,
      key,
    );
  }

  late final _hydro_secretbox_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Uint64,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_secretbox_decrypt');
  late final _hydro_secretbox_decrypt = _hydro_secretbox_decryptPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint8>, int, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  void hydro_secretbox_probe_create(
    ffi.Pointer<ffi.Uint8> probe,
    ffi.Pointer<ffi.Uint8> c,
    int c_len,
    ffi.Pointer<ffi.Char> ctx,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _hydro_secretbox_probe_create(
      probe,
      c,
      c_len,
      ctx,
      key,
    );
  }

  late final _hydro_secretbox_probe_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_secretbox_probe_create');
  late final _hydro_secretbox_probe_create =
      _hydro_secretbox_probe_createPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int hydro_secretbox_probe_verify(
    ffi.Pointer<ffi.Uint8> probe,
    ffi.Pointer<ffi.Uint8> c,
    int c_len,
    ffi.Pointer<ffi.Char> ctx,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _hydro_secretbox_probe_verify(
      probe,
      c,
      c_len,
      ctx,
      key,
    );
  }

  late final _hydro_secretbox_probe_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_secretbox_probe_verify');
  late final _hydro_secretbox_probe_verify =
      _hydro_secretbox_probe_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  void hydro_kdf_keygen(
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _hydro_kdf_keygen(
      key,
    );
  }

  late final _hydro_kdf_keygenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>>(
          'hydro_kdf_keygen');
  late final _hydro_kdf_keygen =
      _hydro_kdf_keygenPtr.asFunction<void Function(ffi.Pointer<ffi.Uint8>)>();

  int hydro_kdf_derive_from_key(
    ffi.Pointer<ffi.Uint8> subkey,
    int subkey_len,
    int subkey_id,
    ffi.Pointer<ffi.Char> ctx,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _hydro_kdf_derive_from_key(
      subkey,
      subkey_len,
      subkey_id,
      ctx,
      key,
    );
  }

  late final _hydro_kdf_derive_from_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Uint64,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_kdf_derive_from_key');
  late final _hydro_kdf_derive_from_key =
      _hydro_kdf_derive_from_keyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>();

  void hydro_sign_keygen(
    ffi.Pointer<hydro_sign_keypair> kp,
  ) {
    return _hydro_sign_keygen(
      kp,
    );
  }

  late final _hydro_sign_keygenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<hydro_sign_keypair>)>>('hydro_sign_keygen');
  late final _hydro_sign_keygen = _hydro_sign_keygenPtr
      .asFunction<void Function(ffi.Pointer<hydro_sign_keypair>)>();

  void hydro_sign_keygen_deterministic(
    ffi.Pointer<hydro_sign_keypair> kp,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return _hydro_sign_keygen_deterministic(
      kp,
      seed,
    );
  }

  late final _hydro_sign_keygen_deterministicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hydro_sign_keypair>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_sign_keygen_deterministic');
  late final _hydro_sign_keygen_deterministic =
      _hydro_sign_keygen_deterministicPtr.asFunction<
          void Function(
              ffi.Pointer<hydro_sign_keypair>, ffi.Pointer<ffi.Uint8>)>();

  int hydro_sign_init(
    ffi.Pointer<hydro_sign_state> state,
    ffi.Pointer<ffi.Char> ctx,
  ) {
    return _hydro_sign_init(
      state,
      ctx,
    );
  }

  late final _hydro_sign_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<hydro_sign_state>,
              ffi.Pointer<ffi.Char>)>>('hydro_sign_init');
  late final _hydro_sign_init = _hydro_sign_initPtr.asFunction<
      int Function(ffi.Pointer<hydro_sign_state>, ffi.Pointer<ffi.Char>)>();

  int hydro_sign_update(
    ffi.Pointer<hydro_sign_state> state,
    ffi.Pointer<ffi.Void> m_,
    int mlen,
  ) {
    return _hydro_sign_update(
      state,
      m_,
      mlen,
    );
  }

  late final _hydro_sign_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<hydro_sign_state>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('hydro_sign_update');
  late final _hydro_sign_update = _hydro_sign_updatePtr.asFunction<
      int Function(
          ffi.Pointer<hydro_sign_state>, ffi.Pointer<ffi.Void>, int)>();

  int hydro_sign_final_create(
    ffi.Pointer<hydro_sign_state> state,
    ffi.Pointer<ffi.Uint8> csig,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _hydro_sign_final_create(
      state,
      csig,
      sk,
    );
  }

  late final _hydro_sign_final_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hydro_sign_state>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_sign_final_create');
  late final _hydro_sign_final_create = _hydro_sign_final_createPtr.asFunction<
      int Function(ffi.Pointer<hydro_sign_state>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>)>();

  int hydro_sign_final_verify(
    ffi.Pointer<hydro_sign_state> state,
    ffi.Pointer<ffi.Uint8> csig,
    ffi.Pointer<ffi.Uint8> pk,
  ) {
    return _hydro_sign_final_verify(
      state,
      csig,
      pk,
    );
  }

  late final _hydro_sign_final_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hydro_sign_state>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_sign_final_verify');
  late final _hydro_sign_final_verify = _hydro_sign_final_verifyPtr.asFunction<
      int Function(ffi.Pointer<hydro_sign_state>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>)>();

  int hydro_sign_create(
    ffi.Pointer<ffi.Uint8> csig,
    ffi.Pointer<ffi.Void> m_,
    int mlen,
    ffi.Pointer<ffi.Char> ctx,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _hydro_sign_create(
      csig,
      m_,
      mlen,
      ctx,
      sk,
    );
  }

  late final _hydro_sign_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_sign_create');
  late final _hydro_sign_create = _hydro_sign_createPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int hydro_sign_verify(
    ffi.Pointer<ffi.Uint8> csig,
    ffi.Pointer<ffi.Void> m_,
    int mlen,
    ffi.Pointer<ffi.Char> ctx,
    ffi.Pointer<ffi.Uint8> pk,
  ) {
    return _hydro_sign_verify(
      csig,
      m_,
      mlen,
      ctx,
      pk,
    );
  }

  late final _hydro_sign_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_sign_verify');
  late final _hydro_sign_verify = _hydro_sign_verifyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  void hydro_kx_keygen(
    ffi.Pointer<hydro_kx_keypair> static_kp,
  ) {
    return _hydro_kx_keygen(
      static_kp,
    );
  }

  late final _hydro_kx_keygenPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hydro_kx_keypair>)>>(
      'hydro_kx_keygen');
  late final _hydro_kx_keygen = _hydro_kx_keygenPtr
      .asFunction<void Function(ffi.Pointer<hydro_kx_keypair>)>();

  void hydro_kx_keygen_deterministic(
    ffi.Pointer<hydro_kx_keypair> static_kp,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return _hydro_kx_keygen_deterministic(
      static_kp,
      seed,
    );
  }

  late final _hydro_kx_keygen_deterministicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hydro_kx_keypair>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_kx_keygen_deterministic');
  late final _hydro_kx_keygen_deterministic =
      _hydro_kx_keygen_deterministicPtr.asFunction<
          void Function(
              ffi.Pointer<hydro_kx_keypair>, ffi.Pointer<ffi.Uint8>)>();

  int hydro_kx_n_1(
    ffi.Pointer<hydro_kx_session_keypair> kp,
    ffi.Pointer<ffi.Uint8> packet1,
    ffi.Pointer<ffi.Uint8> psk,
    ffi.Pointer<ffi.Uint8> peer_static_pk,
  ) {
    return _hydro_kx_n_1(
      kp,
      packet1,
      psk,
      peer_static_pk,
    );
  }

  late final _hydro_kx_n_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hydro_kx_session_keypair>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_kx_n_1');
  late final _hydro_kx_n_1 = _hydro_kx_n_1Ptr.asFunction<
      int Function(
          ffi.Pointer<hydro_kx_session_keypair>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>)>();

  int hydro_kx_n_2(
    ffi.Pointer<hydro_kx_session_keypair> kp,
    ffi.Pointer<ffi.Uint8> packet1,
    ffi.Pointer<ffi.Uint8> psk,
    ffi.Pointer<hydro_kx_keypair> static_kp,
  ) {
    return _hydro_kx_n_2(
      kp,
      packet1,
      psk,
      static_kp,
    );
  }

  late final _hydro_kx_n_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hydro_kx_session_keypair>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<hydro_kx_keypair>)>>('hydro_kx_n_2');
  late final _hydro_kx_n_2 = _hydro_kx_n_2Ptr.asFunction<
      int Function(
          ffi.Pointer<hydro_kx_session_keypair>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<hydro_kx_keypair>)>();

  int hydro_kx_kk_1(
    ffi.Pointer<hydro_kx_state> state,
    ffi.Pointer<ffi.Uint8> packet1,
    ffi.Pointer<ffi.Uint8> peer_static_pk,
    ffi.Pointer<hydro_kx_keypair> static_kp,
  ) {
    return _hydro_kx_kk_1(
      state,
      packet1,
      peer_static_pk,
      static_kp,
    );
  }

  late final _hydro_kx_kk_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hydro_kx_state>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<hydro_kx_keypair>)>>('hydro_kx_kk_1');
  late final _hydro_kx_kk_1 = _hydro_kx_kk_1Ptr.asFunction<
      int Function(ffi.Pointer<hydro_kx_state>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<hydro_kx_keypair>)>();

  int hydro_kx_kk_2(
    ffi.Pointer<hydro_kx_session_keypair> kp,
    ffi.Pointer<ffi.Uint8> packet2,
    ffi.Pointer<ffi.Uint8> packet1,
    ffi.Pointer<ffi.Uint8> peer_static_pk,
    ffi.Pointer<hydro_kx_keypair> static_kp,
  ) {
    return _hydro_kx_kk_2(
      kp,
      packet2,
      packet1,
      peer_static_pk,
      static_kp,
    );
  }

  late final _hydro_kx_kk_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hydro_kx_session_keypair>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<hydro_kx_keypair>)>>('hydro_kx_kk_2');
  late final _hydro_kx_kk_2 = _hydro_kx_kk_2Ptr.asFunction<
      int Function(
          ffi.Pointer<hydro_kx_session_keypair>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<hydro_kx_keypair>)>();

  int hydro_kx_kk_3(
    ffi.Pointer<hydro_kx_state> state,
    ffi.Pointer<hydro_kx_session_keypair> kp,
    ffi.Pointer<ffi.Uint8> packet2,
    ffi.Pointer<hydro_kx_keypair> static_kp,
  ) {
    return _hydro_kx_kk_3(
      state,
      kp,
      packet2,
      static_kp,
    );
  }

  late final _hydro_kx_kk_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hydro_kx_state>,
              ffi.Pointer<hydro_kx_session_keypair>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<hydro_kx_keypair>)>>('hydro_kx_kk_3');
  late final _hydro_kx_kk_3 = _hydro_kx_kk_3Ptr.asFunction<
      int Function(
          ffi.Pointer<hydro_kx_state>,
          ffi.Pointer<hydro_kx_session_keypair>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<hydro_kx_keypair>)>();

  int hydro_kx_xx_1(
    ffi.Pointer<hydro_kx_state> state,
    ffi.Pointer<ffi.Uint8> packet1,
    ffi.Pointer<ffi.Uint8> psk,
  ) {
    return _hydro_kx_xx_1(
      state,
      packet1,
      psk,
    );
  }

  late final _hydro_kx_xx_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<hydro_kx_state>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_kx_xx_1');
  late final _hydro_kx_xx_1 = _hydro_kx_xx_1Ptr.asFunction<
      int Function(ffi.Pointer<hydro_kx_state>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>)>();

  int hydro_kx_xx_2(
    ffi.Pointer<hydro_kx_state> state,
    ffi.Pointer<ffi.Uint8> packet2,
    ffi.Pointer<ffi.Uint8> packet1,
    ffi.Pointer<ffi.Uint8> psk,
    ffi.Pointer<hydro_kx_keypair> static_kp,
  ) {
    return _hydro_kx_xx_2(
      state,
      packet2,
      packet1,
      psk,
      static_kp,
    );
  }

  late final _hydro_kx_xx_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hydro_kx_state>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<hydro_kx_keypair>)>>('hydro_kx_xx_2');
  late final _hydro_kx_xx_2 = _hydro_kx_xx_2Ptr.asFunction<
      int Function(
          ffi.Pointer<hydro_kx_state>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<hydro_kx_keypair>)>();

  int hydro_kx_xx_3(
    ffi.Pointer<hydro_kx_state> state,
    ffi.Pointer<hydro_kx_session_keypair> kp,
    ffi.Pointer<ffi.Uint8> packet3,
    ffi.Pointer<ffi.Uint8> peer_static_pk,
    ffi.Pointer<ffi.Uint8> packet2,
    ffi.Pointer<ffi.Uint8> psk,
    ffi.Pointer<hydro_kx_keypair> static_kp,
  ) {
    return _hydro_kx_xx_3(
      state,
      kp,
      packet3,
      peer_static_pk,
      packet2,
      psk,
      static_kp,
    );
  }

  late final _hydro_kx_xx_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hydro_kx_state>,
              ffi.Pointer<hydro_kx_session_keypair>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<hydro_kx_keypair>)>>('hydro_kx_xx_3');
  late final _hydro_kx_xx_3 = _hydro_kx_xx_3Ptr.asFunction<
      int Function(
          ffi.Pointer<hydro_kx_state>,
          ffi.Pointer<hydro_kx_session_keypair>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<hydro_kx_keypair>)>();

  int hydro_kx_xx_4(
    ffi.Pointer<hydro_kx_state> state,
    ffi.Pointer<hydro_kx_session_keypair> kp,
    ffi.Pointer<ffi.Uint8> peer_static_pk,
    ffi.Pointer<ffi.Uint8> packet3,
    ffi.Pointer<ffi.Uint8> psk,
  ) {
    return _hydro_kx_xx_4(
      state,
      kp,
      peer_static_pk,
      packet3,
      psk,
    );
  }

  late final _hydro_kx_xx_4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hydro_kx_state>,
              ffi.Pointer<hydro_kx_session_keypair>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_kx_xx_4');
  late final _hydro_kx_xx_4 = _hydro_kx_xx_4Ptr.asFunction<
      int Function(
          ffi.Pointer<hydro_kx_state>,
          ffi.Pointer<hydro_kx_session_keypair>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>)>();

  int hydro_kx_nk_1(
    ffi.Pointer<hydro_kx_state> state,
    ffi.Pointer<ffi.Uint8> packet1,
    ffi.Pointer<ffi.Uint8> psk,
    ffi.Pointer<ffi.Uint8> peer_static_pk,
  ) {
    return _hydro_kx_nk_1(
      state,
      packet1,
      psk,
      peer_static_pk,
    );
  }

  late final _hydro_kx_nk_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hydro_kx_state>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_kx_nk_1');
  late final _hydro_kx_nk_1 = _hydro_kx_nk_1Ptr.asFunction<
      int Function(ffi.Pointer<hydro_kx_state>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  int hydro_kx_nk_2(
    ffi.Pointer<hydro_kx_session_keypair> kp,
    ffi.Pointer<ffi.Uint8> packet2,
    ffi.Pointer<ffi.Uint8> packet1,
    ffi.Pointer<ffi.Uint8> psk,
    ffi.Pointer<hydro_kx_keypair> static_kp,
  ) {
    return _hydro_kx_nk_2(
      kp,
      packet2,
      packet1,
      psk,
      static_kp,
    );
  }

  late final _hydro_kx_nk_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hydro_kx_session_keypair>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<hydro_kx_keypair>)>>('hydro_kx_nk_2');
  late final _hydro_kx_nk_2 = _hydro_kx_nk_2Ptr.asFunction<
      int Function(
          ffi.Pointer<hydro_kx_session_keypair>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<hydro_kx_keypair>)>();

  int hydro_kx_nk_3(
    ffi.Pointer<hydro_kx_state> state,
    ffi.Pointer<hydro_kx_session_keypair> kp,
    ffi.Pointer<ffi.Uint8> packet2,
  ) {
    return _hydro_kx_nk_3(
      state,
      kp,
      packet2,
    );
  }

  late final _hydro_kx_nk_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hydro_kx_state>,
              ffi.Pointer<hydro_kx_session_keypair>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_kx_nk_3');
  late final _hydro_kx_nk_3 = _hydro_kx_nk_3Ptr.asFunction<
      int Function(ffi.Pointer<hydro_kx_state>,
          ffi.Pointer<hydro_kx_session_keypair>, ffi.Pointer<ffi.Uint8>)>();

  void hydro_pwhash_keygen(
    ffi.Pointer<ffi.Uint8> master_key,
  ) {
    return _hydro_pwhash_keygen(
      master_key,
    );
  }

  late final _hydro_pwhash_keygenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>>(
          'hydro_pwhash_keygen');
  late final _hydro_pwhash_keygen = _hydro_pwhash_keygenPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>)>();

  int hydro_pwhash_deterministic(
    ffi.Pointer<ffi.Uint8> h,
    int h_len,
    ffi.Pointer<ffi.Char> passwd,
    int passwd_len,
    ffi.Pointer<ffi.Char> ctx,
    ffi.Pointer<ffi.Uint8> master_key,
    int opslimit,
    int memlimit,
    int threads,
  ) {
    return _hydro_pwhash_deterministic(
      h,
      h_len,
      passwd,
      passwd_len,
      ctx,
      master_key,
      opslimit,
      memlimit,
      threads,
    );
  }

  late final _hydro_pwhash_deterministicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint64,
              ffi.Size,
              ffi.Uint8)>>('hydro_pwhash_deterministic');
  late final _hydro_pwhash_deterministic =
      _hydro_pwhash_deterministicPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  int hydro_pwhash_create(
    ffi.Pointer<ffi.Uint8> stored,
    ffi.Pointer<ffi.Char> passwd,
    int passwd_len,
    ffi.Pointer<ffi.Uint8> master_key,
    int opslimit,
    int memlimit,
    int threads,
  ) {
    return _hydro_pwhash_create(
      stored,
      passwd,
      passwd_len,
      master_key,
      opslimit,
      memlimit,
      threads,
    );
  }

  late final _hydro_pwhash_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint64,
              ffi.Size,
              ffi.Uint8)>>('hydro_pwhash_create');
  late final _hydro_pwhash_create = _hydro_pwhash_createPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  int hydro_pwhash_verify(
    ffi.Pointer<ffi.Uint8> stored,
    ffi.Pointer<ffi.Char> passwd,
    int passwd_len,
    ffi.Pointer<ffi.Uint8> master_key,
    int opslimit_max,
    int memlimit_max,
    int threads_max,
  ) {
    return _hydro_pwhash_verify(
      stored,
      passwd,
      passwd_len,
      master_key,
      opslimit_max,
      memlimit_max,
      threads_max,
    );
  }

  late final _hydro_pwhash_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint64,
              ffi.Size,
              ffi.Uint8)>>('hydro_pwhash_verify');
  late final _hydro_pwhash_verify = _hydro_pwhash_verifyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  int hydro_pwhash_derive_static_key(
    ffi.Pointer<ffi.Uint8> static_key,
    int static_key_len,
    ffi.Pointer<ffi.Uint8> stored,
    ffi.Pointer<ffi.Char> passwd,
    int passwd_len,
    ffi.Pointer<ffi.Char> ctx,
    ffi.Pointer<ffi.Uint8> master_key,
    int opslimit_max,
    int memlimit_max,
    int threads_max,
  ) {
    return _hydro_pwhash_derive_static_key(
      static_key,
      static_key_len,
      stored,
      passwd,
      passwd_len,
      ctx,
      master_key,
      opslimit_max,
      memlimit_max,
      threads_max,
    );
  }

  late final _hydro_pwhash_derive_static_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint64,
              ffi.Size,
              ffi.Uint8)>>('hydro_pwhash_derive_static_key');
  late final _hydro_pwhash_derive_static_key =
      _hydro_pwhash_derive_static_keyPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int)>();

  int hydro_pwhash_reencrypt(
    ffi.Pointer<ffi.Uint8> stored,
    ffi.Pointer<ffi.Uint8> master_key,
    ffi.Pointer<ffi.Uint8> new_master_key,
  ) {
    return _hydro_pwhash_reencrypt(
      stored,
      master_key,
      new_master_key,
    );
  }

  late final _hydro_pwhash_reencryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('hydro_pwhash_reencrypt');
  late final _hydro_pwhash_reencrypt = _hydro_pwhash_reencryptPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>)>();

  int hydro_pwhash_upgrade(
    ffi.Pointer<ffi.Uint8> stored,
    ffi.Pointer<ffi.Uint8> master_key,
    int opslimit,
    int memlimit,
    int threads,
  ) {
    return _hydro_pwhash_upgrade(
      stored,
      master_key,
      opslimit,
      memlimit,
      threads,
    );
  }

  late final _hydro_pwhash_upgradePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint64, ffi.Size, ffi.Uint8)>>('hydro_pwhash_upgrade');
  late final _hydro_pwhash_upgrade = _hydro_pwhash_upgradePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// ----------------
  void hydro_memzero(
    ffi.Pointer<ffi.Void> pnt,
    int len,
  ) {
    return _hydro_memzero(
      pnt,
      len,
    );
  }

  late final _hydro_memzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('hydro_memzero');
  late final _hydro_memzero =
      _hydro_memzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void hydro_increment(
    ffi.Pointer<ffi.Uint8> n,
    int len,
  ) {
    return _hydro_increment(
      n,
      len,
    );
  }

  late final _hydro_incrementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Size)>>('hydro_increment');
  late final _hydro_increment = _hydro_incrementPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  bool hydro_equal(
    ffi.Pointer<ffi.Void> b1_,
    ffi.Pointer<ffi.Void> b2_,
    int len,
  ) {
    return _hydro_equal(
      b1_,
      b2_,
      len,
    );
  }

  late final _hydro_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('hydro_equal');
  late final _hydro_equal = _hydro_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int hydro_compare(
    ffi.Pointer<ffi.Uint8> b1_,
    ffi.Pointer<ffi.Uint8> b2_,
    int len,
  ) {
    return _hydro_compare(
      b1_,
      b2_,
      len,
    );
  }

  late final _hydro_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('hydro_compare');
  late final _hydro_compare = _hydro_comparePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<ffi.Char> hydro_bin2hex(
    ffi.Pointer<ffi.Char> hex,
    int hex_maxlen,
    ffi.Pointer<ffi.Uint8> bin,
    int bin_len,
  ) {
    return _hydro_bin2hex(
      hex,
      hex_maxlen,
      bin,
      bin_len,
    );
  }

  late final _hydro_bin2hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Uint8>, ffi.Size)>>('hydro_bin2hex');
  late final _hydro_bin2hex = _hydro_bin2hexPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int hydro_hex2bin(
    ffi.Pointer<ffi.Uint8> bin,
    int bin_maxlen,
    ffi.Pointer<ffi.Char> hex,
    int hex_len,
    ffi.Pointer<ffi.Char> ignore,
    ffi.Pointer<ffi.Pointer<ffi.Char>> hex_end_p,
  ) {
    return _hydro_hex2bin(
      bin,
      bin_maxlen,
      hex,
      hex_len,
      ignore,
      hex_end_p,
    );
  }

  late final _hydro_hex2binPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('hydro_hex2bin');
  late final _hydro_hex2bin = _hydro_hex2binPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int hydro_pad(
    ffi.Pointer<ffi.UnsignedChar> buf,
    int unpadded_buflen,
    int blocksize,
    int max_buflen,
  ) {
    return _hydro_pad(
      buf,
      unpadded_buflen,
      blocksize,
      max_buflen,
    );
  }

  late final _hydro_padPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Size, ffi.Size,
              ffi.Size)>>('hydro_pad');
  late final _hydro_pad = _hydro_padPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  int hydro_unpad(
    ffi.Pointer<ffi.UnsignedChar> buf,
    int padded_buflen,
    int blocksize,
  ) {
    return _hydro_unpad(
      buf,
      padded_buflen,
      blocksize,
    );
  }

  late final _hydro_unpadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Size,
              ffi.Size)>>('hydro_unpad');
  late final _hydro_unpad = _hydro_unpadPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedChar>, int, int)>();
}

final class hydro_hash_state extends ffi.Struct {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.Uint32> state;

  @ffi.Uint8()
  external int buf_off;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> align;
}

final class hydro_sign_state extends ffi.Struct {
  external hydro_hash_state hash_st;
}

final class hydro_sign_keypair extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> pk;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> sk;
}

final class hydro_kx_keypair extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> pk;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> sk;
}

final class hydro_kx_session_keypair extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> rx;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> tx;
}

final class hydro_kx_state extends ffi.Struct {
  external hydro_kx_keypair eph_kp;

  external hydro_hash_state h_st;
}

const int HYDRO_VERSION_MAJOR = 1;

const int HYDRO_VERSION_MINOR = 0;

const int hydro_random_SEEDBYTES = 32;

const int hydro_hash_BYTES = 32;

const int hydro_hash_BYTES_MAX = 65535;

const int hydro_hash_BYTES_MIN = 16;

const int hydro_hash_CONTEXTBYTES = 8;

const int hydro_hash_KEYBYTES = 32;

const int hydro_secretbox_CONTEXTBYTES = 8;

const int hydro_secretbox_HEADERBYTES = 36;

const int hydro_secretbox_KEYBYTES = 32;

const int hydro_secretbox_PROBEBYTES = 16;

const int hydro_kdf_CONTEXTBYTES = 8;

const int hydro_kdf_KEYBYTES = 32;

const int hydro_kdf_BYTES_MAX = 65535;

const int hydro_kdf_BYTES_MIN = 16;

const int hydro_sign_BYTES = 64;

const int hydro_sign_CONTEXTBYTES = 8;

const int hydro_sign_PUBLICKEYBYTES = 32;

const int hydro_sign_SECRETKEYBYTES = 64;

const int hydro_sign_SEEDBYTES = 32;

const int hydro_kx_SESSIONKEYBYTES = 32;

const int hydro_kx_PUBLICKEYBYTES = 32;

const int hydro_kx_SECRETKEYBYTES = 32;

const int hydro_kx_PSKBYTES = 32;

const int hydro_kx_SEEDBYTES = 32;

const int hydro_kx_N_PACKET1BYTES = 48;

const int hydro_kx_KK_PACKET1BYTES = 48;

const int hydro_kx_KK_PACKET2BYTES = 48;

const int hydro_kx_XX_PACKET1BYTES = 48;

const int hydro_kx_XX_PACKET2BYTES = 96;

const int hydro_kx_XX_PACKET3BYTES = 64;

const int hydro_kx_NK_PACKET1BYTES = 48;

const int hydro_kx_NK_PACKET2BYTES = 48;

const int hydro_pwhash_CONTEXTBYTES = 8;

const int hydro_pwhash_MASTERKEYBYTES = 32;

const int hydro_pwhash_STOREDBYTES = 128;

const int HYDRO_HWTYPE_ATMEGA328 = 1;
